{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from 'react';\nexport const useHttp = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const request = useCallback(async function (url) {\n    let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';\n    let body = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    setLoading(true);\n\n    try {\n      if (body) {\n        body = JSON.stringify(body);\n        headers['Content-Type'] = 'application/json';\n      }\n\n      const response = await fetch(url, {\n        method,\n        body,\n        headers\n      });\n      const data = await response.json();\n\n      if (!response.ok) {\n        console.log(\"Client\", \"Проблема в http hook. Проблема: \", data.message);\n        throw new Error(data.message || 'Проблема в http hook');\n      }\n\n      setLoading(false);\n      return data;\n    } catch (e) {\n      console.log(\"Catch\", e.message);\n      setLoading(false);\n      setError(e.message);\n      throw e;\n    }\n  }, []);\n  const clearError = useCallback(() => setError(null), []);\n  return {\n    loading,\n    request,\n    error,\n    clearError\n  };\n};\n\n_s(useHttp, \"wBqGcGl6EafFNGt940fH8x5vtvA=\");","map":{"version":3,"sources":["D:/Projects/Web/shortlinkapp/client/src/hooks/http.hook.js"],"names":["useState","useCallback","useHttp","loading","setLoading","error","setError","request","url","method","body","headers","JSON","stringify","response","fetch","data","json","ok","console","log","message","Error","e","clearError"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,WAAlB,QAAoC,OAApC;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMO,OAAO,GAAGN,WAAW,CAAC,gBAAOO,GAAP,EAA0D;AAAA,QAA9CC,MAA8C,uEAArC,KAAqC;AAAA,QAA9BC,IAA8B,uEAAvB,IAAuB;AAAA,QAAjBC,OAAiB,uEAAP,EAAO;AACpFP,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACF,UAAIM,IAAJ,EAAU;AACRA,QAAAA,IAAI,GAAGE,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAP;AACAC,QAAAA,OAAO,CAAC,cAAD,CAAP,GAA0B,kBAA1B;AACD;;AAED,YAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAD,EAAM;AAACC,QAAAA,MAAD;AAASC,QAAAA,IAAT;AAAeC,QAAAA;AAAf,OAAN,CAA5B;AACA,YAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;;AAEA,UAAI,CAACH,QAAQ,CAACI,EAAd,EAAkB;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqB,kCAArB,EAAyDJ,IAAI,CAACK,OAA9D;AACA,cAAM,IAAIC,KAAJ,CAAUN,IAAI,CAACK,OAAL,IAAgB,sBAA1B,CAAN;AACD;;AAEDjB,MAAAA,UAAU,CAAC,KAAD,CAAV;AAEA,aAAOY,IAAP;AACD,KAjBD,CAiBE,OAAOO,CAAP,EAAU;AACVJ,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBG,CAAC,CAACF,OAAvB;AACAjB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAACiB,CAAC,CAACF,OAAH,CAAR;AACA,YAAME,CAAN;AACD;AACF,GAzB0B,EAyBzB,EAzByB,CAA3B;AA2BA,QAAMC,UAAU,GAAGvB,WAAW,CAAC,MAAMK,QAAQ,CAAC,IAAD,CAAf,EAAuB,EAAvB,CAA9B;AAEA,SAAO;AAACH,IAAAA,OAAD;AAAUI,IAAAA,OAAV;AAAmBF,IAAAA,KAAnB;AAA0BmB,IAAAA;AAA1B,GAAP;AACD,CAlCM;;GAAMtB,O","sourcesContent":["import {useState, useCallback} from 'react'\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false)\r\n  const [error, setError] = useState(null)\r\n\r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\r\n    setLoading(true)\r\n    try {\r\n      if (body) {\r\n        body = JSON.stringify(body)\r\n        headers['Content-Type'] = 'application/json'\r\n      }\r\n\r\n      const response = await fetch(url, {method, body, headers})\r\n      const data = await response.json()\r\n\r\n      if (!response.ok) {\r\n        console.log(\"Client\",\"Проблема в http hook. Проблема: \", data.message)\r\n        throw new Error(data.message || 'Проблема в http hook')\r\n      }\r\n\r\n      setLoading(false)\r\n\r\n      return data\r\n    } catch (e) {\r\n      console.log(\"Catch\", e.message)\r\n      setLoading(false)\r\n      setError(e.message)\r\n      throw e\r\n    }\r\n  },[])\r\n\r\n  const clearError = useCallback(() => setError(null), [])\r\n\r\n  return {loading, request, error, clearError}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}