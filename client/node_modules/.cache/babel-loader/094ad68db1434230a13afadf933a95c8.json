{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Web\\\\shortlinkapp\\\\client\\\\src\\\\pages\\\\DetailsLinkPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { useHttp } from \"../hooks/http.hook\";\nimport { Loader } from \"../components/Loader\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const DetailsLinkPage = () => {\n  _s();\n\n  const {\n    token\n  } = useContext(AuthContext);\n  const {\n    request,\n    loading\n  } = useHttp();\n  const [link, setLink] = useState(null);\n  const linkId = useParams().id;\n  const getLink = useCallback(async () => {\n    try {\n      const fetched = await request(`/api/link/${linkId}`, 'GET', null, {\n        Authorization: `Bearer ${token}`\n      });\n      setLink(fetched);\n    } catch (e) {}\n  }, [token, linkId, request]);\n  useEffect(() => {\n    getLink();\n  }, [getLink]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !loading && link && /*#__PURE__*/_jsxDEV(LinkCard, {\n      link: link\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 35\n    }, this)\n  }, void 0, false);\n};\n\n_s(DetailsLinkPage, \"XO3liI/dGvGB4cCA0xMAaLwhXDQ=\", true, function () {\n  return [useHttp];\n});\n\n_c = DetailsLinkPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"DetailsLinkPage\");","map":{"version":3,"sources":["D:/Projects/Web/shortlinkapp/client/src/pages/DetailsLinkPage.js"],"names":["React","useCallback","useContext","useEffect","useState","useHttp","Loader","AuthContext","DetailsLinkPage","token","request","loading","link","setLink","linkId","useParams","id","getLink","fetched","Authorization","e"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,WAAf,EAA4BC,UAA5B,EAAwCC,SAAxC,EAAmDC,QAAnD,QAAkE,OAAlE;AACA,SAAQC,OAAR,QAAsB,oBAAtB;AACA,SAAQC,MAAR,QAAqB,sBAArB;AACA,SAAQC,WAAR,QAA0B,wBAA1B;;;AAEA,OAAO,MAAMC,eAAe,GAAG,MAAK;AAAA;;AAChC,QAAM;AAACC,IAAAA;AAAD,MAAUP,UAAU,CAACK,WAAD,CAA1B;AACA,QAAM;AAACG,IAAAA,OAAD;AAAUC,IAAAA;AAAV,MAAqBN,OAAO,EAAlC;AACA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAMU,MAAM,GAAGC,SAAS,GAAGC,EAA3B;AAEA,QAAMC,OAAO,GAAGhB,WAAW,CAAC,YAAY;AACpC,QAAI;AACA,YAAMiB,OAAO,GAAG,MAAMR,OAAO,CAAE,aAAYI,MAAO,EAArB,EAAwB,KAAxB,EAA+B,IAA/B,EAAqC;AAC9DK,QAAAA,aAAa,EAAG,UAASV,KAAM;AAD+B,OAArC,CAA7B;AAGAI,MAAAA,OAAO,CAACK,OAAD,CAAP;AACH,KALD,CAKE,OAAOE,CAAP,EAAU,CAAE;AACjB,GAP0B,EAOxB,CAACX,KAAD,EAAQK,MAAR,EAAgBJ,OAAhB,CAPwB,CAA3B;AASAP,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,OAAO;AACV,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;;AAIA,MAAIN,OAAJ,EAAa;AACT,wBAAO,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,sBACI;AAAA,cACM,CAACA,OAAD,IAAYC,IAAZ,iBAAoB,QAAC,QAAD;AAAU,MAAA,IAAI,EAAEA;AAAhB;AAAA;AAAA;AAAA;AAAA;AAD1B,mBADJ;AAKH,CA5BM;;GAAMJ,e;UAEkBH,O;;;KAFlBG,e","sourcesContent":["import React, {useCallback, useContext, useEffect, useState} from 'react'\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {Loader} from \"../components/Loader\";\r\nimport {AuthContext} from \"../context/AuthContext\";\r\n\r\nexport const DetailsLinkPage = () =>{\r\n    const {token} = useContext(AuthContext)\r\n    const {request, loading} = useHttp()\r\n    const [link, setLink] = useState(null)\r\n    const linkId = useParams().id\r\n\r\n    const getLink = useCallback(async () => {\r\n        try {\r\n            const fetched = await request(`/api/link/${linkId}`, 'GET', null, {\r\n                Authorization: `Bearer ${token}`\r\n            })\r\n            setLink(fetched)\r\n        } catch (e) {}\r\n    }, [token, linkId, request])\r\n\r\n    useEffect(() => {\r\n        getLink()\r\n    }, [getLink])\r\n\r\n    if (loading) {\r\n        return <Loader />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            { !loading && link && <LinkCard link={link} /> }\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}